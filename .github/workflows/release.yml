---
name: Release

on:
  push:
    branches: [ main ]

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, 'chore(release)')"
    outputs:
      released: ${{ steps.release.outputs.released }}
      version: ${{ steps.release.outputs.version }}
      tag: ${{ steps.release.outputs.tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install semantic-release
        run: |
          npm install -g semantic-release
          npm install -g @semantic-release/changelog
          npm install -g @semantic-release/git
          npm install -g @semantic-release/github
          npm install -g @semantic-release/exec
          npm install -g conventional-changelog-conventionalcommits

      - name: Create semantic-release config
        run: |
          cat > .releaserc.json << 'EOF'
          {
            "branches": ["main"],
            "plugins": [
              [
                "@semantic-release/commit-analyzer",
                {
                  "preset": "conventionalcommits",
                  "releaseRules": [
                    {"type": "feat", "release": "minor"},
                    {"type": "fix", "release": "patch"},
                    {"type": "perf", "release": "patch"},
                    {"type": "revert", "release": "patch"},
                    {"type": "docs", "release": "patch"},
                    {"type": "style", "release": false},
                    {"type": "refactor", "release": "patch"},
                    {"type": "test", "release": false},
                    {"type": "build", "release": "patch"},
                    {"type": "ci", "release": false},
                    {"type": "chore", "release": false},
                    {"breaking": true, "release": "major"}
                  ]
                }
              ],
              [
                "@semantic-release/release-notes-generator",
                {
                  "preset": "conventionalcommits",
                  "presetConfig": {
                    "types": [
                      {"type": "feat", "section": "Features"},
                      {"type": "fix", "section": "Bug Fixes"},
                      {"type": "perf", "section": "Performance Improvements"},
                      {"type": "revert", "section": "Reverts"},
                      {"type": "docs", "section": "Documentation"},
                      {"type": "style", "section": "Styles"},
                      {"type": "refactor", "section": "Code Refactoring"},
                      {"type": "test", "section": "Tests"},
                      {"type": "build", "section": "Build System"},
                      {"type": "ci", "section": "Continuous Integration"}
                    ]
                  }
                }
              ],
              "@semantic-release/changelog",
              [
                "@semantic-release/exec",
                {
                  "prepareCmd": "echo 'VERSION=${nextRelease.version}' >> version.env"
                }
              ],
              [
                "@semantic-release/git",
                {
                  "assets": ["CHANGELOG.md", "version.env"],
                  "message": "chore(release): ${nextRelease.version} [skip ci]\n\n${nextRelease.notes}"
                }
              ],
              "@semantic-release/github"
            ]
          }
          EOF

      - name: Release
        id: release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npx semantic-release --debug
          if [ -f version.env ]; then
            source version.env
            echo "released=true" >> $GITHUB_OUTPUT
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "tag=v$VERSION" >> $GITHUB_OUTPUT
          else
            echo "released=false" >> $GITHUB_OUTPUT
          fi

  docker-release:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: release
    if: needs.release.outputs.released == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          ref: ${{ needs.release.outputs.tag }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ github.repository }}/session-database:latest
            ghcr.io/${{ github.repository }}/session-database:${{ needs.release.outputs.version }}
          labels: |
            org.opencontainers.image.title=Session Database
            org.opencontainers.image.description=Redis-based session storage service
            org.opencontainers.image.version=${{ needs.release.outputs.version }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ github.run_timestamp }}

  helm-release:
    name: Package and Release Helm Chart
    runs-on: ubuntu-latest
    needs: release
    if: needs.release.outputs.released == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          ref: ${{ needs.release.outputs.tag }}

      - name: Install Helm
        uses: azure/setup-helm@v4
        with:
          version: 'latest'

      - name: Update Helm Chart version
        run: |
          sed -i "s/^version:.*/version: ${{ needs.release.outputs.version }}/" helm/session-database/Chart.yaml
          sed -i "s/^appVersion:.*/appVersion: \"${{ needs.release.outputs.version }}\"/" helm/session-database/Chart.yaml

      - name: Package Helm Chart
        run: |
          helm package helm/session-database --destination ./helm-packages

      - name: Upload Helm Chart to Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.release.outputs.tag }}
          files: ./helm-packages/*.tgz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
